<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Topic Modeling | DS lore]]></title>
  <link href="http://nadbordrozd.github.io/blog/categories/topic-modeling/atom.xml" rel="self"/>
  <link href="http://nadbordrozd.github.io/"/>
  <updated>2016-05-21T22:12:21+01:00</updated>
  <id>http://nadbordrozd.github.io/</id>
  <author>
    <name><![CDATA[nadbor]]></name>
    <email><![CDATA[nadbordrozd@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Text Classification With Word2Vec]]></title>
    <link href="http://nadbordrozd.github.io/blog/2016/05/20/text-classification-with-word2vec/"/>
    <updated>2016-05-20T18:18:58+01:00</updated>
    <id>http://nadbordrozd.github.io/blog/2016/05/20/text-classification-with-word2vec</id>
    <content type="html"><![CDATA[<p>In the <a href="http://nadbordrozd.github.io/blog/2015/11/29/ds-toolbox-topic-models/">previous post</a> I talked about usefulness of topic models for non-NLP tasks, it’s back to NLP-land this time. I decided to investigate if <a href="https://en.wikipedia.org/wiki/Word_embedding">word embeddings</a> can help in a classic NLP problem - text categorization. Full code used to generate numbers and plots in this post can be found <a href="https://github.com/nadbordrozd/blog_stuff/blob/master/classification_w2v/benchmarking.ipynb">here</a>.</p>

<h4 id="motivation">Motivation</h4>
<p>The basic idea is that semantic vectors (such as the ones provided by Word2Vec) should preserve most of the relevant information about a text while having relatively low dimensionality which allows better machine learning treatment than straight one-hot encoding of words. Another advantage of topic models is that they are unsupervised so they can help when labaled data is scarce. Say you only have one thousand manually classified blog posts but a million unlabeled ones. A high quality topic model can be trained on the full set of one million. If you can use topic modeling-derived features in your classification, you will be benefitting from your entire collection of texts, not just the labeled ones.</p>

<h4 id="getting-the-embedding">Getting the embedding</h4>
<p>Ok, word embeddings are awesome, how do we use them? Before we do anything we need to get the vectors. We can download one of the great pre-trained models from <a href="http://nlp.stanford.edu/projects/glove/">GloVe</a>:
<code>bash
wget http://nlp.stanford.edu/data/glove.6B.zip
unzip glove.6B.zip
</code></p>

<p>and use load them up in python:</p>

<p>```python
import numpy as np</p>

<p>with open(“glove.6B.50d.txt”, “rb”) as lines:
    w2v = {line.split()[0]: np.array(map(float, line.split()[1:]))
           for line in lines}
```</p>

<p>or we can train a Word2Vec model from scratch with gensim:</p>

<p><code>python
import gensim
# let X be a list of tokenized texts (i.e. list of lists of tokens)
model = gensim.models.Word2Vec(X, size=100)
w2v = dict(zip(model.index2word, model.syn0))
</code></p>

<h4 id="the-python-meat">The (python) meat</h4>
<p>We got ourselves a dictionary mapping word -&gt; 100-dimensional vector. Now we can use it to build features. The simplest way to do that is by averaging word vectors for all words in a text. We will build a sklearn-compatible transformer that is initialised with a word -&gt; vector dictionary.</p>

<p>```python
class MeanEmbeddingVectorizer(object):
    def <strong>init</strong>(self, word2vec):
        self.word2vec = word2vec
        # if a text is empty we should return a vector of zeros
        # with the same dimensionality as all the other vectors
        self.dim = len(word2vec.itervalues().next())</p>

<pre><code>def fit(self, X, y):
    return self 

def transform(self, X):
    return np.array([
        np.mean([self.word2vec[w] for w in words if w in self.word2vec] 
                or [np.zeros(self.dim)], axis=0)
        for words in X
    ]) ```
</code></pre>

<p>Let’s throw in a version that uses tf-idf weighting scheme for good measure</p>

<p>```python
class TfidfEmbeddingVectorizer(object):
    def <strong>init</strong>(self, word2vec):
        self.word2vec = word2vec
        self.word2weight = None
        self.dim = len(word2vec.itervalues().next())</p>

<pre><code>def fit(self, X, y):
    tfidf = TfidfVectorizer(analyzer=lambda x: x)
    tfidf.fit(X)
    # if a word was never seen - it must be at least as infrequent
    # as any of the known words - so the default idf is the max of 
    # known idf's
    max_idf = max(tfidf.idf_)
    self.word2weight = defaultdict(
        lambda: max_idf, 
        [(w, tfidf.idf_[i]) for w, i in tfidf.vocabulary_.items()])

    return self

def transform(self, X):
    return np.array([
            np.mean([self.word2vec[w] * self.word2weight[w]
                     for w in words if w in self.word2vec] or
                    [np.zeros(self.dim)], axis=0)
            for words in X
        ]) ```
</code></pre>

<p>These vectorizers can now be used <em>almost</em> the same way as <code>CountVectorizer</code> or <code>TfidfVectorizer</code> from <code>sklearn.feature_extraction.text</code>. Almost - because sklearn vectorizers can also do their own tokenization - a feature which we won’t be using anyway because the benchmarks we will be using come already tokenized. In a real application I wouldn’t trust sklearn with tokenization anyway - rather let spaCy do it.</p>

<p>Now we are ready to define the actual models that will take tokenised text, vectorize and learn to classify the vectors with something fancy like Extra Trees. sklearn’s Pipeline is perfect for this:</p>

<p>```python
from sklearn.pipeline import Pipeline
from sklearn.ensemble import ExtraTreesClassifier</p>

<p>etree_w2v = Pipeline([
    (“word2vec vectorizer”, MeanEmbeddingVectorizer(w2v)), 
    (“extra trees”, ExtraTreesClassifier(n_estimators=200))])
etree_w2v_tfidf = Pipeline([
    (“word2vec vectorizer”, TfidfEmbeddingVectorizer(w2v)), 
    (“extra trees”, ExtraTreesClassifier(n_estimators=200))])
```</p>

<h4 id="benchmarks">Benchmarks</h4>
<p>I benchmarked the models on everyone’s favorite <a href="http://www.cs.umb.edu/~smimarog/textmining/datasets/">Reuters-21578</a> datasets. Extra Trees-based word-embedding-utilising models competed against text classification classics - Naive Bayes and SVM. Full list of contestants:</p>

<ul>
  <li>mult_nb - Multinomial Naive Bayes</li>
  <li>bern_nb - Bernoulli Naive Bayes</li>
  <li>svc - linear kernel SVM</li>
  <li>glove_small - ExtraTrees with 200 trees and vectorizer based on 50-dimensional gloVe embedding trained on 6B tokens</li>
  <li>glove_big - same as above but using 300-dimensional gloVe embedding trained on 840B tokens</li>
  <li>w2v - same but with using 100-dimensional word2vec embedding trained on the benchmark data itself (using both training and test examples [but not labels!])</li>
</ul>

<p>Each of these came in two varieties - regular and tf-idf weighted.</p>

<p>The results (on 5-fold cv on a the R8 dataset of 7674 texts labeled with 8 categories):</p>

<p><code>bash
model                score
-----------------  -------
svc_tfidf           0.9656
svc                 0.9562
w2v_tfidf           0.9554
w2v                 0.9516
mult_nb             0.9467
glove_big           0.9279
glove_big_tfidf     0.9273
glove_small         0.9250
glove_small_tfidf   0.9061
mult_nb_tfidf       0.8615
bern_nb             0.7954
bern_nb_tfidf       0.7954
</code></p>

<p>SVM wins, word2vec-based Extra Trees is a close second, Naive Bayes not far behind. Interestingly, embedding trained on this relatively tiny dataset does significantly better than pretrained GloVe - which is otherwise fantastic. Can we do better? Let’s check how do the models compare depending on the number of labeled training examples. Due to its semi-supervised nature w2v should shine when there is little labeled data.</p>

<p>{% img /images/text_class_with_w2v/r8.png %}</p>

<p>That indeed seems to be the case. <code>w2v_tfidf</code>’s performance degrades most gracefully of the bunch. <code>SVM</code> takes the biggest hit when examples are few. Lets try the other two benchmarks from Reuters-21578. 52-way classification:</p>

<p>{% img /images/text_class_with_w2v/r52.png %}</p>

<p>Qualitatively similar results.</p>

<p>And 20-way classification:</p>

<p>{% img /images/text_class_with_w2v/20ng.png %}</p>

<p>This time pretrained embeddings do better than Word2Vec and Naive Bayes does really well, otherwise same as before.</p>

<h4 id="conclusions">Conclusions</h4>
<ol>
  <li>SVM’s are pretty great at text classification tasks</li>
  <li>Models based on simple averaging of word-vectors can be surprisingly good too (given how much information is lost in taking the average)</li>
  <li>but they only seem to have a clear advantage when there is ridiculously little labeled training data</li>
</ol>

<p>At this point I have to note that averaging vectors is only the easiest way of leveraging word embeddings in classification but not the only one. You could also try embedding whole documents directly with <a href="https://radimrehurek.com/gensim/models/doc2vec.html">Doc2Vec</a>. Or use Multinomial Gaussian Naive Bayes on word vectors. I have tried the <a href="https://github.com/nadbordrozd/blog_stuff/blob/master/classification_w2v/multi_multi_kernel_nb.py">latter approach</a> but it was too slow to include in the benchmark.</p>

<ol>
  <li>Sometimes pretrained embeddings give clearly superior results to word2vec trained on the specific benchmark, sometimes it’s the opposite. Not sure what is going on here.</li>
</ol>

<p>Overall, we won’t be throwing away our SVMs any time soon in favor of word2vec but it has it’s place in text classification. Like when you have a tiny training set or to ensemble it with other models to gain edge in Kaggle.</p>

<p>Plus, can SVM do this:
```python
X = [[‘Berlin’, ‘London’],
     [‘cow’, ‘cat’],
     [‘pink’, ‘yellow’]]
y = [‘capitals’, ‘animals’, ‘colors’]
etree_glove_big.fit(X, y)</p>

<h1 id="never-before-seen-words">never before seen words!!!</h1>
<p>test_X = [[‘dog’], [‘red’], [‘Madrid’]]</p>

<p>print etree_glove_big.predict(test_X)
```
prints</p>

<p><code>text
['animals' 'colors' 'capitals']
</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DS Toolbox - Topic Models]]></title>
    <link href="http://nadbordrozd.github.io/blog/2015/11/29/ds-toolbox-topic-models/"/>
    <updated>2015-11-29T14:59:33+00:00</updated>
    <id>http://nadbordrozd.github.io/blog/2015/11/29/ds-toolbox-topic-models</id>
    <content type="html"><![CDATA[<p>If you’re not primarily working with NLP you may not have been paying attention to topic modeling and word embeddings. In this post I intend to convince you that you should.</p>

<h3 id="topic-models">Topic models</h3>
<p>Topic models are a set of models in NLP that discover common themes in a collection of documents. You give it a list of texts and it comes up with a bunch of topics and maps every document to a topic or a mixture of topics. <a href="http://www.princeton.edu/~achaney/tmve/wiki100k/browse/topic-presence.html">Here</a> you can see a visualization of a topic model applied to wikipedia articles. As you can see, it picks up similar kinds of themes in the texts that a human being would notice. Take topic 5 for instance. Its top relevant words are “war”, “force”, “army”, “attack”, “military” and top articles: “Second Boer War”, “Erwin Rommel”, “Axis powers”, “Vietnam war”. Pretty neat. Most topic models (like the most popular <a href="https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation">LDA</a> produce a vector of numbers for every text - the distribution of topics and a similar vector for every word - the affinity of the word to every topic.</p>

<h3 id="word-and-document-embeddings">Word (and document) embeddings</h3>
<p>Word embeddings are related to topic models but instead of mapping a text to a mixture of topics they learn to map words to real valued fixed-size vectors. The mapping is designed to preserve the semantic structure so that the distance between vectors corresponds to distance in meaning of words. An additional property of these embeddings (probably unintended) is that you can do a sort of algebra on words - like this:</p>

<script type="math/tex; mode=display">vector("Paris") - vector("France") + vector("Italy") \approx vector("Rome")</script>

<p>- an examples taken from the most famous word embedding algorithm  -<a href="https://code.google.com/p/word2vec/">word2vec</a>. How cool is that?
 If you want to play with the vectors yourself and discover new fun analogies ($Bush - Iraq + Vietnam \approx Nixon$ !!!) you can download pretrained vectors from word2vec or <a href="http://nlp.stanford.edu/projects/glove/">GloVe</a>.</p>

<h3 id="why-you-should-care">Why you should care</h3>
<p>Unsupervised algorithms learning about analogies between real-world entities is pretty cool but it obscures the wider applicability of these algorithms. The topic modeling and embedding algorithms were invented in the context of NLP but most of them (including LDA and wor2vec) don’t have any inherent knowledge about natural languages and can be applied just as well to sequences of items from a discrete set of any kind. This is huge. Sequences (or sets) of items are notoriously hard to work with. Most popular ML algorithms expect fixed-size vectors as inputs. If your inputs are sequences you can either:</p>

<ul>
  <li>do one-hot encoding and then use any old ML algo you want (like a random forest). Unfortunately one-hot discards all information about the order of items. More importantly, as the size of the vocabulary grows beyond thousands (which is still tiny as far as vocabularies go) your random forest will take forever to train and overfit.</li>
  <li>use naive bayes. NB works surprisingly well but only for classification and only when the problem is - well, naive. It also utilizes the item order information to a very limited extent via n-grams.</li>
  <li>use a <a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/">recurrent neural network</a> This can actually be very effective in some cases but I don’t think it woudl work well with a vocabulary size in the thousands. Even the character-level language models take days to train properly on a GPU (but what incredible results it produces!). I believe NNs of all kinds will get better and easier to use but as of now this is not a practical solution to our problem at all.</li>
</ul>

<p>This is where word embeddings come in. Just run word2vec on your sequences of items and you’ll get a reasonably-dimensional representation of every item. You can then take the mean of all vectors in a sequence to get a representation of sequences. Or run <a href="https://cs.stanford.edu/~quocle/paragraph_vector.pdf">doc2vec</a> and you’ll get a vector for each sequence directly. Or if you need them clustered - run LDA. LDA’s word-topic coefficients can also be used as word embedding but they don’t do nearly as good of a job at it as word2vec. Same goes for LDA’s text-topic coefficients as a document to vector mapping.</p>

<p>This is it. This is what topic modeling buys you. It’s a generic clustering and feature extraction technique that works on sequences (or sets) of items from a discrete vocabulary. Does it actually work in practice? I don’t know of a lot of examples of people using it but I know a few.</p>

<h4 id="page-jumps">Page jumps</h4>
<p>As I have already described in my <a href="http://nadbordrozd.github.io/interviews/">mini-guide to data science interviews</a> (question “Predicting page jumps”) it can be used to model users jumping between pages of a web application. Here a page plays the role of a word and a user journey is a sentence. You can (and from what I understood from the interview - they [the company I interviewed with] do) use topic modeling to segment users based on their journeys and extract features for them to predict page jumps.</p>

<h4 id="ad-clicks">Ad clicks</h4>
<p>In a similar vein, topic modeling <a href="http://www.cs.kumamoto-u.ac.jp/~yasuko/PUBLICATIONS/kdd12-trimine.pdf">has been used</a> as a feature extraction technique in the prediction of ad clicks. The paper concentrates on the authors’ special brand of topic modeling but the idea is simple and can be used with any topic model for example LDA. They treat hosts (the websites with banners on them) as words and users who visit the websites as documents. Let’s say John visits youtube then google then wikipedia then youtube again then tmz then guardian. This gives us a sequence [“youtube”, “google”, “wikipedia”, “youtube”, “tmz”, “guardian”]. Topic modeling is applied to the set of all users and the result is a set of topics (“media”, “business” and “drive” in the paper) and a decomposition of every user into those topics. So for our John we should expect something like <code>{media: 0.8, business: 0.2, drive: 0}</code>. This is interesting in itself and constitutes a great feature vector that you can feed into a regression predicting clicks - which is exactly what the authors did.</p>

<h4 id="deepwalk">DeepWalk</h4>
<p>Feature extraction from graphs is even harder than for sequences. Say you want to classify youtube videos. You have a labeled training set and a set of features for every video. But you also know that some videos link to other videos - forming a graph. Information about the position of the video in this graph is bound to be useful for classifiaction (think “oh, I’m in that weird part of youtube again”) but how do you use it. Authors of the <a href="http://arxiv.org/abs/1403.6652">DeepWalk</a> paper compared several approaches and the best turned out to be a trick involving word2vec that they invented. This time the role of a word is played by a node in the graph (a youtube video). What plays the role of a sentence? For that a collection of short random walks on the graph is constructed - starting at every node of the graph. Think about what happens when a youtube video ends and another one starts playing, and then another one and another. Do this a few times for every video on youtube and you have a corpus of texts. Authors of the paper applied word2vec to those sequences to get vector embeddings for videos and then used these vectors as features in classification. It worked better then all other approaches - even ones that use global features of the graph. Awesome.</p>

<h4 id="frequent-itemsets">Frequent itemsets</h4>
<p>Association rule learning is a popular task in the context of retail. If a customer bought butter and bread, what other item are they likely to buy? The usual approach is to count instances of people buying {bread, butter, X} and divide that number by the count of people buying {bread, butter} - this estimates the probability of buying X. Then you can find the X that maximizes the probability and do something with it (suggest it to the user as they are about to checkout perhaps). This is a bit crude, not very robust and it doesn’t provide any insight, just the prediction. What you can do instead is to run (you guessed it) topic modeling with items playing the role of words and baskets playing the role of sentences. Word2vec will give you vector representations of both items and baskets which will allow you to use more sophisticated algorithms for predicting the next item. You will also get a segmentation of all users and all items for free. To understand why this is superior consider this: topic modeling will easily pick up on the cluster of vegetarian buyers and then the model will know not to recommend the buyer pork chops even if they bought three other items that usually go with bacon - this is something frequent itemset algorithms are incapable of. When a new type of soy-based pork substitute appears on the shelves, the algorithm will also take much less time to figure out that it belongs to the vegetarian cluster and is analogous to meat. I don’t actually know if anyone in retail is doing topic modeling on baskets but if they don’t, they should. I’ll do it myself if I can find a free dataset with retail baskets.</p>

<p>If you know of any other cool applications of topic modeling to non-NLP problems let me know.</p>

<p>If you want to play with topic models yourself I wholehartedly recommend <a href="https://radimrehurek.com/gensim/">gensim</a>. I tried also MLLib but its word2vec implementation required 3 times as much RAM (for each of 10 cores I used) and still was about ten times slower than gensim.</p>
]]></content>
  </entry>
  
</feed>
